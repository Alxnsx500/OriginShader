#version 300 es
#pragma optimize(on)
precision highp float;

#include "fragmentVersionCentroid.h"

#include "shaderfunction.lin"

#ifndef BYPASS_PIXEL_SHADER
_centroid in vec2 uv0;
_centroid in vec2 uv1;

flat in vec3 campos;
flat in vec3 clocampos;

flat in vec3 orisunlig;
flat in vec3 grosunlig;
flat in vec3 L;

flat in vec3 closunlig;
flat in vec3 closkylum;

in vec3 envlig;

in vec4 col;
in vec4 varcol;

in vec3 outsca;
in vec3 insca;

in vec4 worpos;
in vec4 chupos;
#endif

#include "uniformShaderConstants.h"
#include "uniformInterFrameConstants.h"
#include "uniformPerFrameConstants.h"
#include "util.h"

LAYOUT_BINDING(0)
uniform sampler2D TEXTURE_0;
LAYOUT_BINDING(1)
uniform sampler2D TEXTURE_1;
LAYOUT_BINDING(2)
uniform sampler2D TEXTURE_2;

void main()
{
#ifdef BYPASS_PIXEL_SHADER
	return;
#else
	vec4 debug = vec4(0.5);

	vec2 ddxuv0 = dFdx(uv0);
	vec2 ddyuv0 = dFdy(uv0);
	vec4 ddxpos = dFdx(chupos);
	vec4 ddypos = dFdy(chupos);

	vec4 texcol_ = texture(TEXTURE_0, uv0);

#if NORMAL_MAP_FIX
#define TEXSIZW 16384.0
#define TEXSIZH 8192.0
#else
#define TEXSIZW 8192.0
#define TEXSIZH 8192.0
#endif

	vec4 texcol_o = textureLod(TEXTURE_0, uv0, 0.0);
	vec4 texcol_r = textureLod(TEXTURE_0, uv0 + vec2(NORMAL_MAP_W / TEXSIZW, 0.0), 0.0);
	vec4 texcol_l = textureLod(TEXTURE_0, uv0 - vec2(NORMAL_MAP_W / TEXSIZW, 0.0), 0.0);
	vec4 texcol_u = textureLod(TEXTURE_0, uv0 - vec2(0.0, NORMAL_MAP_W / TEXSIZH), 0.0);
	vec4 texcol_d = textureLod(TEXTURE_0, uv0 + vec2(0.0, NORMAL_MAP_W / TEXSIZH), 0.0);

#if USE_ALPHA_TEST && !defined(SEASONS_FAR)
#ifdef ALPHA_TO_COVERAGE
#define ALPHA_THRESHOLD 0.05
#else
#define ALPHA_THRESHOLD 0.50
#endif
	if (texcol_.a < ALPHA_THRESHOLD)
		discard;
#endif

	vec4 outcol = vec4(0.5, 0.5, 0.5, 1.0);

#if USE_ALPHA_TEST && !defined(SEASONS) && !defined(SEASONS_FAR) && !defined(BLEND)
	if (col.b == 0.0) //redstone_wire
	{
		outcol.rgb = texcol_.rgb * col.rgb;
		outcol.a = texcol_.a;
	}
	else
#endif

	{
		int blockcode = int(texcol_o.a * 255.0 + 0.1);
		blockcode = blockcode == 0x00 ? 0xFF : blockcode; //修复远处高草发光

		vec3 wornor = normalize(cross(ddxpos.xyz, ddypos.xyz));
		mat3 invTBN = getinvTBN(ddxuv0, ddyuv0, ddxpos, ddypos, wornor);

		bool underwater = (wornor.y > 0.9 && uv1.y < 0.9 && abs((2.0 * chupos.y - 15.0) / 16.0 - uv1.y) < 0.00002);

		vec3 N;

		vec3 V = normalize(-worpos.xyz);
		vec3 H = normalize(V + L);

		vec3 poilig = getpoilig(uv1);
		vec3 sunlig;

		vec4 texcol = vec4(texcol_.rgb * varcol.rgb, texcol_.a);

		struct s_c
		{
			bool skyref;
			bool blodif;
			bool bloflu;
			bool blosca;
		} Control;

		struct s_m
		{
			float Roughness;
			vec3 BaseColor;
			vec3 SpecularColor;
		} Material;

#if !defined(SEASONS_FAR) && !defined(BLEND) //远处树叶不会进行alpha test
#ifndef SEASONS
		if (col.a < 0.001)
#endif //leaves
		{
			sunlig = uv1.y >= 0.875 ? grosunlig : vec3(0.0);
			Control = s_c(false, true, false, false);
			Material = s_m(ROUGHNESS, gamma2line(texcol.rgb), F0_LEAVES);
			N = getblonor(wornor, invTBN, texcol_o, texcol_r, texcol_l, texcol_u, texcol_d);
		}
#ifndef SEASONS
		else
#endif
#endif

#if !USE_ALPHA_TEST && !defined(SEASONS) && !defined(SEASONS_FAR) && defined(BLEND)
			if (col.a < 0.999)
		{
			sunlig = grosunlig * getshadow(uv1, varcol);
			Control = s_c(true, false, false, true);
#if USE_WATER_TEXTURE
			Material = s_m(0.0, gamma2line(texcol.rgb), F0_WATER);
#else
			Material = s_m(0.0, gamma2line(col.rgb), F0_WATER);
#endif
			N = getwatnor(invTBN, chupos, TOTAL_REAL_WORLD_TIME);
			outcol.a = 0.0;
		}
		else
#endif
#if !defined(SEASONS) && !defined(SEASONS_FAR)
		{
#if USE_ALPHA_TEST //tallgrass
			sunlig = uv1.y >= 0.875 ? grosunlig : vec3(0.0);
			Control = s_c(false, true, false, false);
			Material = s_m(ROUGHNESS, gamma2line(texcol.rgb), F0_LEAVES);
			N = getblonor(wornor, invTBN, texcol_o, texcol_r, texcol_l, texcol_u, texcol_d);

#elif defined(BLEND) //transparent
			sunlig = grosunlig * getshadow(uv1, varcol);
			Control = s_c(true, true, false, true);
			Material = s_m(0.0, gamma2line(texcol.rgb), F0_GLASS);
			N = getblonor(wornor, invTBN, texcol_o, texcol_r, texcol_l, texcol_u, texcol_d);
			outcol.a = texcol.a;

#else //default
			if (underwater)
				sunlig = grosunlig * getwatlig(chupos, uv1, TOTAL_REAL_WORLD_TIME);
			else
				sunlig = grosunlig * getshadow(uv1, varcol);

			N = getblonor_a(wornor, invTBN, texcol_o, texcol_r, texcol_l, texcol_u, texcol_d);

			if ((blockcode & 0x80) != 0)
			{
				Control = s_c((blockcode & 0x40) == 0, true, ((blockcode & 0x20) == 0), false);
				Material = s_m(Control.skyref ? 0.0 : ROUGHNESS, gamma2line(texcol.rgb), F0);
			}
			else
			{
				Control = s_c((blockcode & 0x40) == 0, false, ((blockcode & 0x20) == 0), false);
				Material = s_m(Control.skyref ? 0.0 : ROUGHNESS, vec3(0.0), getmetalF0(blockcode));
			}
#endif
		}
#endif

		vec3 sundif = vec3(0.0);
		vec3 poidif = vec3(0.0);
		vec3 envdif = vec3(0.0);
		vec3 sunspe = vec3(0.0);
		vec3 poispe = vec3(0.0);
		vec3 envspe = vec3(0.0);
		vec3 sunsca = vec3(0.0);
		vec3 poisca = vec3(0.0);
		vec3 envsca = vec3(0.0);
		vec3 flulig = vec3(0.0);

		//normal mapping会产生非法负值，钳制即可
		float NoV = max(0.0, dot(N, V));
		float NoL = max(0.0, dot(N, L));
		float NoH = max(0.0, dot(N, H));
		float VoH = dot(V, H);
		float VoL = dot(V, L);

		if (Control.blodif)
		{
			sundif = Diffuse_Gotanda(Material.BaseColor, Material.Roughness, NoV, NoL, VoH, VoL) * sunlig * max(NoL, 0.0);
			poidif = Diffuse_Lambert(Material.BaseColor) * poilig;
			envdif = Material.BaseColor * envlig;
		}

		if (Control.blosca)
		{
			sunsca = scattering_BSDF(Material.BaseColor) * sunlig;
			poisca = scattering_BSDF(Material.BaseColor) * poilig;
			envsca = scattering_BSDF(Material.BaseColor) * envlig;
		}

		if (Control.skyref)
		{
			vec4 thr = vec4(ThresholdMap16(gl_FragCoord.xy));
			envspe = F_Fresnel(Material.SpecularColor, NoV) * uv1.y * skyrender(vec3(0.0), campos, reflect(-V, N), orisunlig, closunlig, closkylum, L, thr, TOTAL_REAL_WORLD_TIME);
			poispe = Diffuse_Lambert(Material.SpecularColor) * poilig;
		}
		else
		{
			sunspe = Specular_BRDF(Material.SpecularColor, Material.Roughness, NoV, NoL, NoH, VoH) * sunlig * NoL;
			poispe = Diffuse_Lambert(Material.SpecularColor) * poilig;
			envspe = Material.SpecularColor * envlig;
		}

		if (Control.bloflu)
			flulig = gamma2line(texcol.rgb) * FLUORESCENCE;

#ifdef BLEND
		outcol.a = outcol.a + line2gamma(lrgb2y(tonemap(envspe, LUM))); //要进行一次blend，用.a而不是.rgb控制反射的强度
		envspe /= gamma2line(outcol.a);
#else
		outcol.a = 1.0;
#endif

		vec3 ligsum = flulig + sundif + poidif + envdif + sunsca + poisca + envsca + sunspe + poispe + envspe;
		outcol.rgb = lig2col(ligsum * outsca + orisunlig * insca);
	}

	gl_FragColor = outcol;

#endif
}
