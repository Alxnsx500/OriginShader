
alpha pbr 编码标准 2.0

若无特殊说明，下文中的材质均指texture，而非material

材质是由像素构成的位图，每个像素由三个通道(RGB)或四个通道(RGBA)组成，每个通道实质上是八位无符号二进制整数。

在着色器中，读取RGB和RGBA的材质的语法完全相同。若材质缺少A通道，则将A通道值视为255(11111111)。在原版shader中大部分方块仅使用RGB通道的颜色信息，忽略A通道的值。

可以给材质添加A通道，在贴图中以特定格式编码pbr信息，同时保证材质与着色器的双向兼容：
1.常规着色器使用alpha pbr材质：
    原版着色器不使用A通道值，此时pbr材质与普通材质包无异，保证常规着色器兼容pbr材质
2.支持alpha pbr的着色器使用常规材质：
    将A=0与A=255定义为默认材质属性，故非pbr材质无方块特效，保证pbr着色器兼容常规材质

综合考虑编码的信息密度、解码效率，alpha pbr按位编码pbr信息。

把通道从高到低依次称为第7,6,5,4,3,2,1,0位，并对每一位做如下定义：
7   1，非金属
    0，金属
6   1，粗糙
    0，光滑
5   1，不发光
    0，发光
4   1，允许自动生成视差或法线
    0，强制使用平面

特别规定将0(00000000)与255(11111111)视为默认材质属性

第3,2,1,0位作为拓展位，可自行设计拓展标准。若不使用应用1填充。



附录：

拓展标准的参考实现：
若为金属，单独取出第3,2位，作为金属F0的索引值:
00  金
01  银(或合金)
10  铜
11  铁

常见问题：
给贴图添加透明度会导致方块透明吗
    不会，原版着色器对不透明方块彻底忽视A通道值

为什么用ps画出来的图导出后发现错误
    检查ps的颜色设置，使用adoble rgb，否则在导出图片时会进行色彩空间的转换

什么是位图，什么是通道，什么是八位无符号二进制整数
    自己去查，这都不知道做啥pbr

附录中的金属索引是标准的一部分吗
    不是，只是我自己在用，你想要用也可以用

有没有现成的shader代码，仅解码部分，我想抄作业
    参考OriginShader，此部分代码单独依CC0协议开源，不受OriginShader的GPL3.0协议限制



Alpha PBR encoding standard 2.0

Unless otherwise specified, the shaders below refer specifically to MCPE shaders

Material is a bitmap of pixels, each of which is composed of three channels (RGB) or four channels (RGBA), each of which is essentially an eight-bit unsigned binary integer.

In the shader, the syntax for reading RGB and RGBA textures is identical.If the texture lacks channel A, the value of channel A is considered 255 (11111111).Most of the blocks in the original shader only use the color information of RGB channel, ignoring the value of A channel.

A channel can be added to the texture to encode the PBR information in a specific format in the map, while ensuring that the texture is bidirectionally compatible with the shader:

1. Regular shaders use alpha pbr:

The original shader does not use channel A values, at which point the PBR texture is the same as the normal texture package, ensuring that the regular shader is compatible with the PBR texture

2. Shaders supporting alpha PBR use regular textures:

Defines A=0 and A=255 as default texture properties, so non-pbr textures have no square effect, ensuring that the PBR shader is compatible with regular textures

Alpha PBR encodes PBR information bitwise, taking into account the information density and decoding efficiency of the encoding.

The channels from high to low are called bits 7,6,5,4,3,2,1,0, and each bit is defined as follows:

7   1, Non-Metals
    0, Metal
6   1, rough
    0, smooth
5   1, no light
    0, luminous
4   1, allowing automatic parallax or normal generation
    0, force flat

Specially designated 0 (00000000) and 255 (11111111) as default texture attributes

As the expanding position, bit 3,2,1,0 can design the expanding standard by itself.Fill without Apply 1.

Appendix:

Reference implementation of extended standards:

If it is a metal, take out the 3,2 bits separately as the index value of the metal F0:
00 Gold
01 Silver (or netherite)
10 Copper
11 Iron

Common problem:

Does adding transparency to a map make the square transparent?
No, the original shader completely ignores channel A values for opaque blocks

Why do pictures drawn with PS find errors after exporting?
Check PS color settings, use adoble rgb, otherwise color space conversion will occur when exporting pictures

What is a bitmap, what is a channel, what is an eight-bit unsigned binary integer?
Check the wiki yourself.

Is the metal index in the appendix part of the standard?
No, just for myself. You can use it if you want.

Is there any ready-made shader code, just decoding part?
Referring to OriginShader, this part of the code is open source by CC0 license alone and is not restricted by OriginShader's GPL3.0 license
